buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }

    dependencies {
        classpath 'com.palantir.gradle.externalpublish:gradle-external-publish-plugin:1.11.0'
        classpath 'com.palantir.javaformat:gradle-palantir-java-format:2.17.0'
        classpath 'com.palantir.gradle.consistentversions:gradle-consistent-versions:2.7.0'
        classpath 'com.palantir.baseline:gradle-baseline-java:4.75.0'
        classpath 'com.palantir.gradle.gitversion:gradle-git-version:0.13.0'
        classpath 'gradle.plugin.org.inferred:gradle-processors:3.6.0'
        classpath 'com.gradle.publish:plugin-publish-plugin:0.20.0'
    }
}
allprojects {
    apply plugin: 'com.palantir.java-format'
}

apply plugin: 'com.palantir.external-publish'
apply plugin: 'com.palantir.external-publish-gradle-plugin'
// So we get publishToMavenLocal
apply plugin: 'maven-publish'

repositories {
    gradlePluginPortal()
    mavenCentral()
}

apply plugin: 'com.palantir.git-version'

group 'com.palantir.gradle.externalpublish'
version System.env.CIRCLE_TAG ?: gitVersion()

apply plugin: 'com.palantir.baseline'
apply plugin: 'java-gradle-plugin'
apply plugin: 'groovy'
apply plugin: 'org.inferred.processors'
apply plugin: 'com.palantir.consistent-versions'
apply plugin: 'com.palantir.baseline-java-versions'

dependencies {
    implementation 'io.github.gradle-nexus:publish-plugin'
    implementation 'com.netflix.nebula:nebula-publishing-plugin'
    implementation 'com.netflix.nebula:gradle-info-plugin'

    testImplementation gradleTestKit()
    testImplementation 'com.google.guava:guava'
    testImplementation 'com.netflix.nebula:nebula-test'
    testImplementation 'org.rauschig:jarchivelib'
}


gradlePlugin {
    plugins {
        def pluginDescription = { artifactType ->
            "Publishes ${artifactType} from a Palantir open source project to an open source package repository"
        }

        externalPublish {
            id = 'com.palantir.external-publish'
            displayName = 'Palantir External Publish Plugin'
            description = pluginDescription('artifacts')
            implementationClass = 'com.palantir.gradle.externalpublish.ExternalPublishRootPlugin'
        }
        externalPublishJar {
            id = 'com.palantir.external-publish-jar'
            displayName = 'Palantir External Publish Jar Plugin'
            description = pluginDescription('jars')
            implementationClass = 'com.palantir.gradle.externalpublish.ExternalPublishJarPlugin'
        }
        externalPublishDist {
            id = 'com.palantir.external-publish-dist'
            displayName = 'Palantir External Publish Dist Plugin'
            description = pluginDescription('distributions')
            implementationClass = 'com.palantir.gradle.externalpublish.ExternalPublishDistPlugin'
        }
        externalPublishApplicationDist {
            id = 'com.palantir.external-publish-application-dist'
            displayName = 'Palantir External Publish Application Dist Plugin'
            description = pluginDescription('application distributions')
            implementationClass = 'com.palantir.gradle.externalpublish.ExternalPublishApplicationDistPlugin'
        }
        externalPublishConjure {
            id = 'com.palantir.external-publish-conjure'
            displayName = 'Palantir External Publish Conjure Plugin'
            description = pluginDescription('conjure IR')
            implementationClass = 'com.palantir.gradle.externalpublish.ExternalPublishConjurePlugin'
        }
        externalPublishCustom {
            id = 'com.palantir.external-publish-custom'
            displayName = 'Palantir External Publish Custom Plugin'
            description = pluginDescription('custom gradle publications')
            implementationClass = 'com.palantir.gradle.externalpublish.ExternalPublishCustomPlugin'
        }
    }
}

pluginBundle {
    website = 'https://github.com/palantir/gradle-external-publish-plugin'
    vcsUrl = 'https://github.com/palantir/gradle-external-publish-plugin'
    description = 'Publishes Palantir open source projects to open source package repositories'
    tags = ['publishing']
}

tasks.named('processResources').configure {
    duplicatesStrategy 'include'
}

javaVersions {
    libraryTarget = 11
    runtime = 17
}

